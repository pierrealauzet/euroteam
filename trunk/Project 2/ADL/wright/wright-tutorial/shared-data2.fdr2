-- FDR compression functions
transparent diamond
transparent normalise


-- Wright defined processes
channel abstractEvent
DFA = abstractEvent -> DFA |~| SKIP

quant_semi({},_) = SKIP
quant_semi(S,PARAM) = |~| i:S @ PARAM(i) ; quant_semi(diff(S,{i}),PARAM)

power_set({}) = {{}}
power_set(S) = { union(y,{x}) | x <- S, y <- power_set(diff(S,{x}))}


-- Style SharedData
-- Type declarations
-- events for abstract specification
channel get, set


-- Connector SharedData2
  -- generated definitions (to split long sets)
  
  ALPHA_SharedData2 = {|User.set, User.get, Initializer.set, Initializer.get
      |}
  
  Continue = ((Initializer.set -> Continue) [] ((User.set -> Continue) [] ((Initializer.get
         -> Continue) [] ((User.get -> Continue) [] SKIP))))
  Glue = ((Initializer.set -> Continue) [] SKIP)
  
  ALPHA_Initializer = {get, set}
  A = ((set -> A) |~| ((get -> A) |~| SKIP))
  ROLEInitializer = (set -> A)
  InitializerA = ROLEInitializer [[ x <- abstractEvent | x <- ALPHA_Initializer
       ]]
  assert DFA [FD= InitializerA
  
  ALPHA_User = {set, get}
  U = ((set -> U) |~| ((get -> U) |~| SKIP))
  ROLEUser = U
  UserA = ROLEUser [[ x <- abstractEvent | x <- ALPHA_User ]]
  assert DFA [FD= UserA
  
  

channel Initializer: {get, set}
channel User: {set, get}
SharedData2 = ( (ROLEInitializer[[ x <- Initializer.x | x <- {get, set } ]]
       [| diff({|Initializer|}, {}) |]
    (ROLEUser[[ x <- User.x | x <- {set, get } ]]
       [| diff({|User|}, {}) |]
    Glue)) )
SharedData2A = SharedData2 [[ x <- abstractEvent | x <- ALPHA_SharedData2
     ]]
assert DFA [FD= SharedData2A

-- No constraints
-- End Style
